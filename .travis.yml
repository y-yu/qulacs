language: cpp

sudo: false

env:
  global:
    - Fortran_COMPILER='gfortran'
      BUILD_TYPE='Release'
      PYTHON3='3.7.5'
      PYTHON2='2.7.17'

matrix:
  include:
    # 1/ OSX GCC8 PYTHON3.7 build
    - os: osx
      osx_image: xcode11.2
      compiler: gcc
      env:
        - CXX_COMPILER='g++-8'
        - C_COMPILER='gcc-8'
        - PYTHON="${PYTHON3}"
        - COVERAGE=OFF
        - PYENV_ROOT="${HOME}/.pyenv"
        - PATH="${PYENV_ROOT}/bin:$PATH"
      addons:
        homebrew:
          packages:
            - gcc@8
            - swig
            - openssl
          update: true
    # 2/ Linux GCC8 PYTHON3.7 build
    - os: linux
      dist: bionic
      compiler: gcc
      env:
        - CXX_COMPILER='g++-8'
        - C_COMPILER='gcc-8'
        - PYTHON="${PYTHON3}"
        - COVERAGE=ON
        - PYENV_ROOT="${HOME}/.pyenv"
        - PATH="${PYENV_ROOT}/bin:$PATH"
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages:
            - cmake
            - g++-8
            - gcc-8
            - gfortran-7
            - lcov
            - swig
            - libssl1.0-dev
            - clang-format-9
    # 3/ Linux GCC7 PYTHON3.7 build
    - os: linux
      dist: bionic
      compiler: gcc
      env:
        - CXX_COMPILER='g++-7'
        - C_COMPILER='gcc-7'
        - PYTHON="${PYTHON3}"
        - COVERAGE=ON
        - PYENV_ROOT="${HOME}/.pyenv"
        - PATH="${PYENV_ROOT}/bin:$PATH"
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - cmake
            - g++-7
            - gcc-7
            - gfortran-7
            - lcov
            - swig
            - libssl1.0-dev
    # 4/ Linux GCC8 PYTHON2.7 build
    - os: linux
      dist: bionic
      compiler: gcc
      env:
        - CXX_COMPILER='g++-8'
        - C_COMPILER='gcc-8'
        - PYTHON="${PYTHON2}"
        - COVERAGE=ON
        - PYENV_ROOT="${HOME}/.pyenv"
        - PATH="${PYENV_ROOT}/bin:$PATH"
      addons:
        apt:
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - cmake
            - g++-8
            - gcc-8
            - gfortran-7
            - lcov
            - swig
            - libssl-dev
    # 5/ Windows VS17 PYTHON3.7 build
    - os: windows
      env:
        - COVERAGE=ON
        - PYTHON="${PYTHON3}"
        - MSBUILD_BIN='C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild\15.0\Bin'
        - CMAKE_BIN='C:\Program Files\CMake'
        - PYTHON_BIN='C:\Python37'
        - PATH="$MSBUILD_BIN:$CMAKE_BIN:$PYTHON_BIN:$PYTHON_BIN\Scripts:$PATH"

cache:
  directories:
    - $HOME/.local
    # pip
    - $HOME/.cache/pip
    # pyenv
    - $HOME/.pyenv
    # Homebrew
    - $HOME/Library/Caches/Homebrew

before_install:
  # Check C++ format
  - set -o pipefail
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" && "${PYTHON}" == "${PYTHON3}" && "${CXX_COMPILER}" == "g++-8" ]]; then
      clang-format-9 --version
      git ls-files "*.cpp" | xargs clang-format-9 -style=file -i
      git --no-pager diff --exit-code
      diff_result=$?
      if [[  "$diff_result" -eq 1 ]]; then
        echo "There are some code which has not been formatted."
        exit 1
      fi
    fi
  - |
    if [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then
      travis_retry choco install -y cmake
      travis_retry choco install -y python --version "${PYTHON}"
      if [[ "${PYTHON}" == "3"* ]]; then
        alias python="python3"
      fi
    fi
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew update &> /dev/null
      brew cask uninstall --force oclint
      brew upgrade cmake
    fi
  - |
    if [[ "${TRAVIS_OS_NAME}" != "windows" && -z "$(ls -A ${PYENV_ROOT})" ]]; then
      git clone https://github.com/pyenv/pyenv.git "${PYENV_ROOT}"
      eval "$(pyenv init -)"
      pyenv install "${PYTHON}"
      pyenv local "${PYTHON}"
    elif [[ "${TRAVIS_OS_NAME}" != "windows" ]]; then
      eval "$(pyenv init -)"
      pyenv local "${PYTHON}" || \
        (pyenv install "${PYTHON}" && \
        pyenv local "${PYTHON}")
    fi
  - python --version
  - python -m pip install --upgrade pip
  - pip install -U --only-binary=numpy,scipy numpy scipy

install:
  - set -o pipefail
  - |
    if [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then
      ./script/build_msvc_2015.bat
    else
      ./script/build_gcc.sh
    fi
  # Check if `pip install` will be done successfully or not
  - python setup.py install

script:
  - set -o pipefail
  - |
    if [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then
      cmake --build ./visualstudio --target test --config Release
      cmake --build ./visualstudio --target pythontest --config Release
    else
      cd ./build
      make test
      make pythontest
    fi
    
